diff -ur busybox-1.5.1/networking/udhcp/clientpacket.c busybox-1.5.1.patched/networking/udhcp/clientpacket.c
--- busybox-1.5.1/networking/udhcp/clientpacket.c	2007-05-20 09:54:20.000000000 -0700
+++ busybox-1.5.1.patched/networking/udhcp/clientpacket.c	2008-01-26 23:05:31.000000000 -0800
@@ -83,7 +83,14 @@
 	packet.xid = xid;
 	if (requested)
 		add_simple_option(packet.options, DHCP_REQUESTED_IP, requested);
-
+	if (!strncmp(client_config.interface, "ib", 2)) {
+		packet.htype = 32;
+		packet.hlen = 0;
+		packet.flags = htons(BROADCAST_FLAG);
+		memset(&packet.chaddr, 0, sizeof(packet.chaddr));
+		packet.ciaddr = 0;
+	}
+	  
 	add_requests(&packet);
 	bb_info_msg("Sending discover...");
 	return udhcp_raw_packet(&packet, INADDR_ANY, CLIENT_PORT, INADDR_BROADCAST,
@@ -102,6 +109,13 @@
 
 	add_simple_option(packet.options, DHCP_REQUESTED_IP, requested);
 	add_simple_option(packet.options, DHCP_SERVER_ID, server);
+	if (!strncmp(client_config.interface, "ib", 2)) {
+		packet.htype = 32;
+		packet.hlen = 0;
+		packet.flags = htons(BROADCAST_FLAG);
+		memset(&packet.chaddr, 0, sizeof(packet.chaddr));
+		packet.ciaddr = 0;
+	}
 
 	add_requests(&packet);
 	addr.s_addr = requested;
diff -ur busybox-1.5.1/networking/udhcp/dhcpc.c busybox-1.5.1.patched/networking/udhcp/dhcpc.c
--- busybox-1.5.1/networking/udhcp/dhcpc.c	2007-05-20 09:54:20.000000000 -0700
+++ busybox-1.5.1.patched/networking/udhcp/dhcpc.c	2008-01-26 23:24:45.000000000 -0800
@@ -254,7 +254,40 @@
 		return 1;
 
 	/* if not set, and not suppressed, setup the default client ID */
-	if (!client_config.clientid && !no_clientid) {
+	if (client_config.clientid) {
+		char *c, flag = 1;
+		int i;
+
+		for (c = client_config.clientid + OPT_DATA, i = 0; *c; c++, i++) {
+			/* Every 3rd char must be a : and all others hex digits. */
+			if ((i + 1) % 3 == 0) {
+				if (*c != ':') {
+					flag = 0;
+					break;
+				}
+			} else if (!isxdigit(*c)) {
+				flag = 0;
+				break;
+			}
+		}
+
+		if (flag && (++i % 3 == 0)) {
+			/* It's a hardware address.	 Re-encode it. */
+			unsigned long new_c;
+			uint8_t *p;
+
+			p = (uint8_t *) client_config.clientid + OPT_DATA + 1;
+			for (c = client_config.clientid + OPT_DATA; 1; c++) {
+				new_c = strtoul(c, &c, 16);
+				*p++ = (uint8_t) new_c;
+				if (!c || (*c != ':')) {
+					break;
+				}
+			}
+			client_config.clientid[OPT_LEN] = i / 3 + 1;
+			client_config.clientid[OPT_DATA] = 1;
+		}
+	} else if (!client_config.clientid && !no_clientid) {
 		client_config.clientid = alloc_dhcp_option(DHCP_CLIENT_ID, "", 7);
 		client_config.clientid[OPT_DATA] = 1;
 		memcpy(client_config.clientid + OPT_DATA+1, client_config.arp, 6);
@@ -398,7 +431,7 @@
 			}
 
 			/* Ignore packets that aren't for us */
-			if (memcmp(packet.chaddr, client_config.arp, 6)) {
+			if (strncmp(client_config.interface, "ib", 2) && memcmp(packet.chaddr, client_config.arp, 6)) {
 				DEBUG("Packet does not have our chaddr - ignoring");
 				continue;
 			}
diff -ur busybox-1.5.1/networking/udhcp/packet.c busybox-1.5.1.patched/networking/udhcp/packet.c
--- busybox-1.5.1/networking/udhcp/packet.c	2007-05-20 09:54:20.000000000 -0700
+++ busybox-1.5.1.patched/networking/udhcp/packet.c	2008-01-26 23:05:31.000000000 -0800
@@ -11,6 +11,7 @@
 #endif
 
 #include "common.h"
+#include "dhcpc.h"
 #include "dhcpd.h"
 #include "options.h"
 
@@ -116,28 +117,69 @@
 {
 	int fd;
 	int result;
+	struct sockaddr addr;
 	struct sockaddr_ll dest;
 	struct udp_dhcp_packet packet;
-
-	fd = socket(PF_PACKET, SOCK_DGRAM, htons(ETH_P_IP));
-	if (fd < 0) {
-		bb_perror_msg("socket");
-		return -1;
-	}
+	unsigned char buff[4096], *pbuff = buff;
 
 	memset(&dest, 0, sizeof(dest));
 	memset(&packet, 0, sizeof(packet));
 
-	dest.sll_family = AF_PACKET;
-	dest.sll_protocol = htons(ETH_P_IP);
-	dest.sll_ifindex = ifindex;
-	dest.sll_halen = 6;
-	memcpy(dest.sll_addr, dest_arp, 6);
-	if (bind(fd, (struct sockaddr *)&dest, sizeof(struct sockaddr_ll)) < 0) {
-		bb_perror_msg("bind");
-		close(fd);
-		return -1;
-	}
+	if (!strncmp(client_config.interface, "ib", 2)) {
+        struct { uint16_t proto; uint16_t reserved; } ipoib_hdr;
+
+		fd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
+		if (fd < 0) {
+			bb_perror_msg("socket");
+			return -1;
+		}
+
+		if (dest_ip == 0xffffffff) {
+			/* Need pseudo-header for IPoIB broadcast.
+			   Currently assumes scope of 2 (link-local). */
+			const unsigned char ipv4_bcast_addr[] = {
+				0x00, 0xff, 0xff, 0xff,
+				0xff, 0x12, 0x40, 0x1b, 0x00, 0x00, 0x00, 0x00,
+				0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
+			};
+
+			memcpy(pbuff, ipv4_bcast_addr, sizeof(ipv4_bcast_addr));
+			pbuff += sizeof(ipv4_bcast_addr);
+		}
+
+		/* Add IPoIB header */
+		ipoib_hdr.proto = htons(ETHERTYPE_IP);
+		ipoib_hdr.reserved = 0;
+		memcpy(pbuff, &ipoib_hdr, sizeof(ipoib_hdr));
+		pbuff += sizeof(ipoib_hdr);
+
+		/* IP header must be word-aligned. */
+		for (; (int) (pbuff - buff) % 4; pbuff++) {
+			bb_info_msg("Fudging hardware header.");
+			*pbuff = 0;
+		}
+
+        memset(&addr, 0x0, sizeof(addr));
+        addr.sa_family = AF_PACKET;
+        strncpy(addr.sa_data, (const char *) client_config.interface, sizeof(addr.sa_data));
+
+	} else {
+		fd = socket(PF_PACKET, SOCK_DGRAM, htons(ETH_P_IP));
+		if (fd < 0) {
+			bb_perror_msg("socket");
+			return -1;
+		}
+    }
+		dest.sll_family = AF_PACKET;
+		dest.sll_protocol = htons(ETH_P_IP);
+		dest.sll_ifindex = ifindex;
+		dest.sll_halen = 6;
+		memcpy(dest.sll_addr, dest_arp, 6);
+		if (bind(fd, (struct sockaddr *)&dest, sizeof(struct sockaddr_ll)) < 0) {
+			bb_perror_msg("bind");
+			close(fd);
+			return -1;
+		}
 
 	packet.ip.protocol = IPPROTO_UDP;
 	packet.ip.saddr = source_ip;
@@ -153,13 +195,22 @@
 	packet.ip.ihl = sizeof(packet.ip) >> 2;
 	packet.ip.version = IPVERSION;
 	packet.ip.ttl = IPDEFTTL;
+	packet.ip.frag_off = htons(0x4000); /* Don't fragment */
 	packet.ip.check = udhcp_checksum(&(packet.ip), sizeof(packet.ip));
 
 	if (sizeof(struct udp_dhcp_packet) != 576)
 		BUG_sizeof_struct_udp_dhcp_packet_must_be_576();
 
-	result = sendto(fd, &packet, sizeof(struct udp_dhcp_packet), 0,
-			(struct sockaddr *) &dest, sizeof(dest));
+    if (pbuff != buff) {
+            memcpy(pbuff, &packet, sizeof(struct udp_dhcp_packet));
+            result = sendto(fd, buff, sizeof(struct udp_dhcp_packet) + (pbuff - buff), 0,
+                            //&addr, sizeof(addr));
+                            (struct sockaddr *) &dest, sizeof(dest));
+    } else {
+            result = sendto(fd, &packet, sizeof(struct udp_dhcp_packet), 0,
+                            (struct sockaddr *) &dest, sizeof(dest));
+    }
+
 	if (result <= 0) {
 		bb_perror_msg("sendto");
 	}
